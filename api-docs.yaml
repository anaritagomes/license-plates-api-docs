openapi: 3.0.0
info:
  title: BCA License Plates API üöó
  description: |
    The License Plates API allows users to manage vehicle registration records in BCA‚Äôs database.

    ### Features:
    - üîç Retrieve all registered license plates
    - üìù Add a new vehicle with `make`, `VIN`, and `registration_date`
    - ‚úèÔ∏è Update an existing license plate's details
    - üóëÔ∏è Remove a vehicle from the database

    ### Use Cases:
    - **Fleet Management Systems:** Maintain up-to-date vehicle registration.
    - **Law Enforcement:** Retrieve vehicle details based on license plates.
    - **Car Dealerships:** Manage used vehicle inventories efficiently.

  version: "1.0.0"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.bca.com
    description: Production Server
  - url: https://staging.api.bca.com
    description: Staging Environment (For testing)
  - url: http://localhost:3000
    description: Local Development Server

tags:
  - name: License Plates
    description: Endpoints for managing license plates.
  - name: Vehicles
    description: General vehicle-related operations.
  - name: FAQs
    description: Frequently asked questions about the API.

paths:
  /licenseplates:
    get:
      summary: Retrieve all license plates
      tags:
        - License Plates
      responses:
        "200":
          description: A list of license plates.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LicensePlate"

    post:
      summary: Add a new license plate
      tags:
        - License Plates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LicensePlateInput"
      responses:
        "201":
          description: License plate added successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicensePlate"
        "400":
          description: Invalid request format.
          content:
            application/json:
              examples:
                missing_fields:
                  value:
                    error: "Missing required fields: make, vin, registration_date"
                invalid_date:
                  value:
                    error: "Invalid date format. Expected YYYY-MM-DD."

  /licenseplates/{id}:
    put:
      summary: Update a license plate
      tags:
        - License Plates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LicensePlateInput"
      responses:
        "200":
          description: License plate updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicensePlate"
        "404":
          description: License plate not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "License plate ID not found."

    delete:
      summary: Delete a license plate
      tags:
        - License Plates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: License plate deleted successfully.
        "404":
          description: License plate not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "License plate ID not found."

  /faq:
    get:
      summary: Frequently Asked Questions
      tags:
        - FAQs
      responses:
        "200":
          description: List of FAQs.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    question:
                      type: string
                    answer:
                      type: string
              examples:
                faq:
                  value:
                    - question: "What response format does the API use?"
                      answer: "All responses are in JSON format."
                    - question: "How do I authenticate API requests?"
                      answer: "Use an API key in the 'X-API-Key' header."

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: "Use your API Key to authenticate requests."

  schemas:
    LicensePlate:
      type: object
      properties:
        id:
          type: string
          example: "150"
        make:
          type: string
          example: "Audi"
        vin:
          type: string
          example: "WAUZ7856UJHI15485"
        registration_date:
          type: string
          format: date
          example: "2010-08-24"

    LicensePlateInput:
      type: object
      required:
        - make
        - vin
        - registration_date
      properties:
        make:
          type: string
          example: "Audi"
        vin:
          type: string
          example: "WAUZ7856UJHI15485"
        registration_date:
          type: string
          format: date
          example: "2010-08-24"
